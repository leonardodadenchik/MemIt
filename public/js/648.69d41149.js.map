{"version":3,"file":"js/648.69d41149.js","mappings":"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","sources":["webpack://client/./src/assets/myWs/myWs.js","webpack://client/./src/assets/playerData/gameData.js","webpack://client/./src/views/GameView.vue","webpack://client/./src/views/GameView.vue?3e8c"],"sourcesContent":["const host = location.origin.replace(/^http/, 'ws')\n\n/*const host = (location.origin.replace(/^http/, 'ws') + ':80/')\n    .replace(':3000', '')\n    .replace(':8080', '')*/\nconst myWs = new WebSocket(host)\n\nexport default myWs\n","export default {\n    cards: undefined,\n    situations: undefined,\n}\n","<template>\n    <div class=\"game\">\n        <div class=\"timerDiv\">\n            <h1>Залишилось часу на хід: {{ this.timerStep }}с.</h1>\n        </div>\n        <div class=\"playersZone\">\n            <div\n                class=\"player\"\n                v-for=\"(player, idx) in playerList\"\n                :key=\"player\"\n            >\n                <div v-if=\"idx + 1 != this.myId\">\n                    <div\n                        :id=\"`position__${idx + 1 > this.myId ? idx : idx + 1}`\"\n                    >\n                        <h2>{{ player.name }}</h2>\n                        <!--<button\n              @click=\"sendVote(idx + 1)\"\n              v-if=\"player.cardStatus != 'selecting...' && !isVoted\"\n            >\n              Vote\n            </button>-->\n                        <div class=\"usedCardDivenge\">\n                            <div\n                                class=\"voteDivenge\"\n                                @click=\"sendVote(idx + 1)\"\n                                v-if=\"\n                                    player.cardStatus != 'selecting...' &&\n                                    !isVoted\n                                \"\n                            >\n                                <p>VOTE</p>\n                            </div>\n                            <img\n                                :src=\"imgesUrlGetter(player.cardStatus)\"\n                                v-if=\"player.cardStatus != 'selecting...'\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"situationZone\">\n            Ситуація:<br />{{ situations[gameStep - 1] }}\n        </div>\n        <!--      v-show=\"\n        this.playerList[Number(this.myId) - 1].cardStatus == 'selecting...'\n      \"-->\n        <div class=\"cardsZone\">\n            <img\n                v-for=\"card in cards\"\n                :key=\"card\"\n                @click=\"sendCard(card)\"\n                class=\"cardImg\"\n                :src=\"imgesUrlGetter(card)\"\n            />\n        </div>\n        <img :src=\"imgesUrlGetter(mySelectedCard)\" class=\"myCard\" />\n    </div>\n</template>\n\n<script>\nimport gameData from '../assets/playerData/gameData.js'\nimport myWs from '../assets/myWs/myWs.js'\nexport default {\n    data() {\n        return {\n            // default\n            playerList: [{ name: 'df', cardStatus: 'selecting...' }],\n            situations: gameData.situations,\n            cards: gameData.cards,\n            ///timering\n            timerStep: 20,\n            gameStep: 1,\n            timerId: undefined,\n            isVoted: false,\n            //for mySelectedCard\n            mySelectedCard: '',\n        }\n    },\n    methods: {\n        timesTimer(time = 30) {\n            clearTimeout(this.timerId)\n            this.timerStep = time - 1\n            this.timerId = setInterval(() => {\n                if (this.timerStep > 0) {\n                    this.timerStep -= 1\n                } else {\n                    clearTimeout(this.timerId)\n                }\n            }, 1000)\n        },\n        myselfUpdatingFunc() {\n            myWs.onmessage = (jsonMessage) => {\n                jsonMessage = JSON.parse(jsonMessage.data)\n                switch (jsonMessage.content) {\n                    case 'card_status':\n                        this.playerList.map((el, idx) => {\n                            el.cardStatus = jsonMessage.cards[idx]\n                            return el\n                        })\n                        break\n                    case 'next_step':\n                        // delete move photos\n                        this.playerList.map((el) => {\n                            return (el.cardStatus = 'selecting...')\n                        })\n                        //upadte game data\n                        this.gameStep += 1\n                        this.timerStep = 0\n                        //add appoutunity to vote\n                        this.isVoted = false\n                        //hide my card\n                        var myCard = Array.from(\n                            document.getElementsByClassName('myCard')\n                        )\n                        myCard[0].style.bottom = `-300px`\n                        //get cards back\n                        var cadsZone = Array.from(\n                            document.getElementsByClassName('cardsZone')\n                        )\n                        cadsZone[0].style.bottom = `-20px`\n                        //reload timer\n                        this.timesTimer()\n                        break\n                    case 'end':\n                        this.$router.push({\n                            name: 'play',\n                        })\n                        alert(\n                            `Game end! Winner is ${\n                                jsonMessage.winner != ''\n                                    ? jsonMessage.winner\n                                    : 'nobody'\n                            }`\n                        )\n                        break\n                }\n            }\n        },\n        cardsRecalcilating() {\n            var cadsZone = Array.from(\n                document.getElementsByClassName('cardsZone')\n            )\n            cadsZone[0].style.left = `${\n                (100 - (this.cards.length * 5 + 2)) / 2.8\n            }vw`\n        },\n        sendCard: async function (cardToSend) {\n            await myWs.send(\n                JSON.stringify({\n                    content: 'card',\n                    card: cardToSend,\n                    player_id: this.myId,\n                    room_code: this.code,\n                })\n            )\n            // recalc left pos of deck\n            var cadsZone = Array.from(\n                document.getElementsByClassName('cardsZone')\n            )\n            cadsZone[0].style.bottom = `-300px`\n            // my card show\n            this.mySelectedCard = cardToSend\n            var myCard = Array.from(document.getElementsByClassName('myCard'))\n            myCard[0].style.bottom = `25px`\n            // удаляю карту которой походил //\n            this.cards = this.cards.filter((el) => el != cardToSend)\n            this.cardsRecalcilating()\n        },\n        sendVote(id) {\n            this.isVoted = true\n            myWs.send(\n                JSON.stringify({\n                    content: 'vote',\n                    vote: id,\n                    room_code: this.code,\n                })\n            )\n        },\n        imgesUrlGetter(cardName) {\n            return `${location.origin}/imahes_library.${cardName}`\n            /*return `http://localhost:3000/images_library/${cardName}`*/\n        },\n    },\n    props: {\n        propPlayerNameList: {\n            type: Array,\n            required: true,\n        },\n        code: {\n            type: String,\n            required: true,\n        },\n        myId: {\n            type: [String, Number],\n            required: true,\n        },\n    },\n    created() {\n        var timer = setInterval(() => {\n            if (myWs.readyState != 0) {\n                clearInterval(timer)\n                this.myselfUpdatingFunc()\n            }\n        }, 100)\n        this.playerList = this.propPlayerNameList.map((el) => {\n            return {\n                name: el,\n                cardStatus: 'selecting...',\n            }\n        })\n    },\n    mounted() {\n        this.timesTimer()\n        //var cardzone = document.getElementsByClassName(\"cardsZone\")[0];\n        var timering = setInterval(() => {\n            // card rebuildimage\n            var cads = Array.from(document.getElementsByClassName('cardImg'))\n            if (cads[0].offsetWidth > 0) {\n                clearInterval(timering)\n                cads.forEach((el) => {\n                    if (el.offsetWidth > el.offsetHeight) {\n                        el.classList.add('revetsedCard')\n                    } else {\n                        el.classList.add('verticalCard')\n                    }\n                })\n                this.cardsRecalcilating()\n\n                //let baseCardHeight = 200;\n                //let betweenCardDistance = 30;\n                //var margLeft = 0;\n            }\n        }, 100)\n    },\n}\n</script>\n<style scoped>\n.timerDiv {\n    font-family: 'Nunito', sans-serif;\n}\n.situationZone {\n    font-family: 'Nunito', sans-serif;\n    position: absolute;\n    font-size: 3vmin;\n    width: 30vw;\n    left: 34vw;\n    height: 10vh;\n    top: 27vh;\n    padding: 2vw;\n}\n.playersZone h2 {\n    font-family: 'Nunito', sans-serif;\n    display: inline-block;\n    margin-right: 1vw;\n}\n.playersZone button {\n    height: 3.5vh;\n    width: 7vw;\n    border: none;\n    border-radius: 0.5em/0.5em;\n    background-color: rgb(220, 234, 246);\n}\n@keyframes cardAppearance {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n.playersZone .usedCardDivenge {\n    position: absolute;\n    left: 0;\n    height: 250px;\n    max-width: 25vw;\n}\n.playersZone img {\n    position: relative;\n    z-index: 1;\n    height: 250px;\n    max-width: 25vw;\n    border-radius: 17px/17px;\n    animation: cardAppearance 0.2s linear 1 normal running 0s forwards;\n}\n.playersZone .voteDivenge {\n    position: absolute;\n    opacity: 0;\n    z-index: 3;\n    height: 250px;\n    width: 100%;\n    border-radius: 17px/17px;\n}\n.playersZone .voteDivenge p {\n    font-family: 'Nunito', sans-serif;\n    position: absolute;\n    top: 30%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n\n    font-size: 4vw;\n    opacity: 1;\n    color: rgb(168, 154, 154);\n}\n.playersZone .voteDivenge:hover {\n    opacity: 0.5;\n    background-color: whitesmoke;\n    cursor: pointer;\n}\n#position__1 {\n    position: absolute;\n\n    width: 25vw;\n    height: 30vh;\n    top: 7vh;\n    left: 0;\n}\n\n#position__2 {\n    position: absolute;\n\n    width: 25vw;\n    height: 30vh;\n    top: 7vh;\n    right: 0;\n}\n#position__3 {\n    position: absolute;\n\n    width: 25vw;\n    height: 30vh;\n    top: 47vh;\n    left: 0;\n}\n#position__4 {\n    position: absolute;\n\n    width: 25vw;\n    height: 30vh;\n    top: 47vh;\n    right: 0;\n}\n.cardsZone {\n    z-index: 5;\n    transition: all 0.4s ease-out;\n    position: fixed;\n    bottom: -20px;\n    left: 28vw;\n}\n\n.cardsZone img {\n    display: inline-flex;\n    margin-right: -80px;\n    transition: all 0.4s ease-out;\n    bottom: 0;\n    border-radius: 5%;\n}\n.cardsZone img:hover {\n    z-index: 10;\n    transform: scale(1.3, 1.3);\n}\n.revetsedCard {\n    transform: rotate(-90deg);\n    margin-bottom: 20px;\n    width: 200px;\n    height: 160px;\n}\n.revetsedCard:hover {\n    box-shadow: 0px 30px 26px 16px rgba(34, 60, 80, 0.53);\n    transform: rotate(0deg);\n    margin-right: 0px;\n    margin-bottom: 35px;\n}\n.verticalCard {\n    transform: rotate(0deg);\n    height: 200px;\n    width: 160px;\n}\n.verticalCard:hover {\n    box-shadow: 0px 65px 26px 16px rgba(34, 60, 80, 0.53);\n    margin-bottom: 40px;\n    margin-right: -0px;\n}\n.myCard {\n    transition: all 0.4s ease-out;\n    position: fixed;\n    border-radius: 5%/5%;\n    height: 250px;\n    left: 35%;\n    bottom: -300px;\n}\n</style>\n","import { render } from \"./GameView.vue?vue&type=template&id=6c25a354&scoped=true\"\nimport script from \"./GameView.vue?vue&type=script&lang=js\"\nexport * from \"./GameView.vue?vue&type=script&lang=js\"\n\nimport \"./GameView.vue?vue&type=style&index=0&id=6c25a354&scoped=true&lang=css\"\n\nimport exportComponent from \"D:\\\\programming\\\\MemIt\\\\client\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-6c25a354\"]])\n\nexport default __exports__"],"names":["host","location","origin","replace","myWs","WebSocket","cards","undefined","situations","class","_createElementVNode","_hoisted_8","_createElementBlock","_toDisplayString","timerStep","_Fragment","_renderList","$data","player","idx","key","myId","_hoisted_4","id","name","cardStatus","onClick","$options","src","_hoisted_13","card","data","playerList","gameData","gameStep","timerId","isVoted","mySelectedCard","methods","timesTimer","time","clearTimeout","this","setInterval","myselfUpdatingFunc","jsonMessage","JSON","parse","content","map","el","myCard","Array","from","document","getElementsByClassName","style","bottom","cadsZone","$router","push","alert","winner","cardsRecalcilating","left","length","sendCard","async","cardToSend","stringify","player_id","room_code","code","filter","sendVote","vote","imgesUrlGetter","cardName","props","propPlayerNameList","type","required","String","Number","created","timer","clearInterval","mounted","timering","cads","offsetWidth","forEach","offsetHeight","classList","add","__exports__","render"],"sourceRoot":""}